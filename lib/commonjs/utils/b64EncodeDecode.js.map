{"version":3,"names":["b64EncodeUnicode","str","encodeURIComponent","replace","_match","p1","String","fromCharCode","b64DecodeUnicode","decodeURIComponent","split","map","c","charCodeAt","toString","slice","join"],"sources":["b64EncodeDecode.ts"],"sourcesContent":["import { decode as b64decode, encode as b64encode } from 'base-64';\n\nconst b64EncodeUnicode = (str: string) => {\n  // First we use encodeURIComponent to get percent-encoded UTF-8,\n  // then we convert the percent encodings into raw bytes which\n  // can be fed into btoa.\n  return b64encode(\n    encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (_match, p1) =>\n      String.fromCharCode(<any>'0x' + p1)\n    )\n  );\n};\n\nconst b64DecodeUnicode = (str: string) => {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return decodeURIComponent(\n    b64decode(str)\n      .split('')\n      .map((c: string) => `%${`00${c.charCodeAt(0).toString(16)}`.slice(-2)}`)\n      .join('')\n  );\n};\n\nexport { b64EncodeUnicode, b64DecodeUnicode };\n"],"mappings":"kHAAA,6BAEA,GAAMA,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,GAAD,CAAiB,CAIxC,MAAO,iBACLC,kBAAkB,CAACD,GAAD,CAAlB,CAAwBE,OAAxB,CAAgC,iBAAhC,CAAmD,SAACC,MAAD,CAASC,EAAT,QACjDC,CAAAA,MAAM,CAACC,YAAP,CAAyB,IAAL,CAAYF,EAAhC,CADiD,EAAnD,CADK,CAAP,CAKD,CATD,C,0CAWA,GAAMG,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACP,GAAD,CAAiB,CAExC,MAAOQ,CAAAA,kBAAkB,CACvB,iBAAUR,GAAV,EACGS,KADH,CACS,EADT,EAEGC,GAFH,CAEO,SAACC,CAAD,YAAmB,MAAKA,CAAC,CAACC,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,CAAL,EAAoCC,KAApC,CAA0C,CAAC,CAA3C,CAAnB,EAFP,EAGGC,IAHH,CAGQ,EAHR,CADuB,CAAzB,CAMD,CARD,C"}