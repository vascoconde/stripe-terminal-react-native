{"version":3,"names":["defaultFineLocationParams","title","message","buttonPositive","isAndroid12orHigher","Platform","OS","Version","requestNeededAndroidPermissions","accessFineLocation","PermissionsAndroid","request","PERMISSIONS","ACCESS_FINE_LOCATION","grantedFineLocation","hasGrantedPermission","error","BLUETOOTH_CONNECT","grantedBT","BLUETOOTH_SCAN","grantedBTScan","status","RESULTS","GRANTED"],"sources":["androidPermissionsUtils.ts"],"sourcesContent":["import { PermissionsAndroid, Platform } from 'react-native';\n\nconst defaultFineLocationParams = {\n  title: 'Location Permission',\n  message: 'Stripe Terminal needs access to your location',\n  buttonPositive: 'Accept',\n};\n\ntype PermissionsProps = {\n  accessFineLocation?: {\n    title: string;\n    message: string;\n    buttonPositive: string;\n  };\n};\n\ntype Error = { error: Record<string, string> | null };\n\nconst isAndroid12orHigher = () =>\n  Platform.OS === 'android' && Platform.Version >= 31;\n\nexport async function requestNeededAndroidPermissions({\n  accessFineLocation = defaultFineLocationParams,\n}: PermissionsProps | undefined = {}): Promise<Error> {\n  const grantedFineLocation = await PermissionsAndroid.request(\n    PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,\n    accessFineLocation || defaultFineLocationParams\n  );\n\n  if (!hasGrantedPermission(grantedFineLocation)) {\n    return {\n      error: {\n        [PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION]:\n          grantedFineLocation,\n      },\n    };\n  }\n\n  if (!isAndroid12orHigher()) {\n    // we're done, we don't need to ask for BT perms\n    return { error: null };\n  }\n\n  // otherwise within expo we have to make use of react-native-permissions\n  const grantedBT = await PermissionsAndroid.request(\n    // BLUETOOTH_CONNECT doesn't support customization\n    PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT\n  );\n\n  if (!hasGrantedPermission(grantedBT)) {\n    return {\n      error: {\n        [PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT]: grantedBT,\n      },\n    };\n  }\n\n  const grantedBTScan = await PermissionsAndroid.request(\n    // BLUETOOTH_SCAN doesn't support customization\n    PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN\n  );\n\n  if (!hasGrantedPermission(grantedBTScan)) {\n    return {\n      error: {\n        [PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN]: grantedBTScan,\n      },\n    };\n  }\n\n  return { error: null };\n}\n\nconst hasGrantedPermission = (status: string) => {\n  return status === PermissionsAndroid.RESULTS.GRANTED;\n};\n"],"mappings":"iYAAA,yCAEA,GAAMA,CAAAA,yBAAyB,CAAG,CAChCC,KAAK,CAAE,qBADyB,CAEhCC,OAAO,CAAE,+CAFuB,CAGhCC,cAAc,CAAE,QAHgB,CAAlC,CAgBA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,SAC1BC,uBAASC,EAAT,GAAgB,SAAhB,EAA6BD,sBAASE,OAAT,EAAoB,EADvB,EAA5B,CAGO,QAAeC,CAAAA,+BAAf,8SAE2B,EAF3B,4BACLC,kBADK,CACLA,kBADK,gCACgBT,yBADhB,yEAG6BU,gCAAmBC,OAAnB,CAChCD,gCAAmBE,WAAnB,CAA+BC,oBADC,CAEhCJ,kBAAkB,EAAIT,yBAFU,CAH7B,SAGCc,mBAHD,kBAQAC,oBAAoB,CAACD,mBAAD,CARpB,yDASI,CACLE,KAAK,iCACFN,gCAAmBE,WAAnB,CAA+BC,oBAD7B,CAEDC,mBAFC,CADA,CATJ,YAiBAV,mBAAmB,EAjBnB,yDAmBI,CAAEY,KAAK,CAAE,IAAT,CAnBJ,4DAuBmBN,gCAAmBC,OAAnB,CAEtBD,gCAAmBE,WAAnB,CAA+BK,iBAFT,CAvBnB,UAuBCC,SAvBD,kBA4BAH,oBAAoB,CAACG,SAAD,CA5BpB,0DA6BI,CACLF,KAAK,iCACFN,gCAAmBE,WAAnB,CAA+BK,iBAD7B,CACiDC,SADjD,CADA,CA7BJ,6DAoCuBR,gCAAmBC,OAAnB,CAE1BD,gCAAmBE,WAAnB,CAA+BO,cAFL,CApCvB,UAoCCC,aApCD,kBAyCAL,oBAAoB,CAACK,aAAD,CAzCpB,0DA0CI,CACLJ,KAAK,iCACFN,gCAAmBE,WAAnB,CAA+BO,cAD7B,CAC8CC,aAD9C,CADA,CA1CJ,0CAiDE,CAAEJ,KAAK,CAAE,IAAT,CAjDF,wEAoDP,GAAMD,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACM,MAAD,CAAoB,CAC/C,MAAOA,CAAAA,MAAM,GAAKX,gCAAmBY,OAAnB,CAA2BC,OAA7C,CACD,CAFD"}