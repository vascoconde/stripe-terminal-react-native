{"version":3,"names":["StripeTerminalReactNative","NativeModules"],"sources":["StripeTerminalSdk.tsx"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport type {\n  InitParams,\n  StripeError,\n  DiscoverReadersParams,\n  DiscoverReadersResultType,\n  CancelDiscoveringResultType,\n  ConnectBluetoothReaderParams,\n  DisconnectReaderResultType,\n  Reader,\n  ConnectInternetReaderParams,\n  ConnectUsbReaderParams,\n  CreatePaymentIntentParams,\n  CollectSetupIntentPaymentMethodParams,\n  PaymentIntentResultType,\n  Cart,\n  SetupIntentResultType,\n  CreateSetupIntentParams,\n  ClearReaderDisplayResultType,\n  GetLocationsParams,\n  GetLocationsResultType,\n  RefundParams,\n  CollectRefundPaymentMethodType,\n  ProcessRefundResultType,\n  ReadReusableCardParamsType,\n  PaymentMethodResultType,\n  SetConnectionTokenParams,\n  ConnectHandoffParams,\n  ConnectLocalMobileParams,\n  ConnectReaderResultType,\n  CollectPaymentMethodParams,\n} from './types';\n\nconst { StripeTerminalReactNative } = NativeModules;\n\ntype InitializeResultNativeType = Promise<{\n  error?: StripeError;\n  reader?: Reader.Type;\n}>;\n\ninterface InternalInitParams extends InitParams {\n  reactNativeVersion: string;\n}\n\ntype StripeTerminalSdkType = {\n  // Initialize StripeTerminalSdk native module\n  initialize(params: InternalInitParams): InitializeResultNativeType;\n  // Set connection token\n  setConnectionToken(params: SetConnectionTokenParams): Promise<void>;\n  // Discover readers by connection type\n  discoverReaders(params: DiscoverReadersParams): DiscoverReadersResultType;\n  // Cancel discovering readers\n  cancelDiscovering(): CancelDiscoveringResultType;\n  // Connect to reader via bluetooth\n  connectBluetoothReader(\n    params: ConnectBluetoothReaderParams\n  ): Promise<ConnectReaderResultType>;\n  // Connect to reader via internet\n  connectInternetReader(\n    params: ConnectInternetReaderParams\n  ): Promise<ConnectReaderResultType>;\n  connectHandoffReader(\n    params: ConnectHandoffParams\n  ): Promise<ConnectReaderResultType>;\n  connectLocalMobileReader(\n    params: ConnectLocalMobileParams\n  ): Promise<ConnectReaderResultType>;\n  // Connect to reader via USB\n  connectUsbReader(\n    params: ConnectUsbReaderParams\n  ): Promise<ConnectReaderResultType>;\n  // Disconnect reader\n  disconnectReader(): Promise<DisconnectReaderResultType>;\n  // Create a payment intent\n  createPaymentIntent(\n    params: CreatePaymentIntentParams\n  ): Promise<PaymentIntentResultType>;\n  // Collect Payment Method\n  collectPaymentMethod(\n    params: CollectPaymentMethodParams\n  ): Promise<PaymentIntentResultType>;\n  // Retrieve Payment Intent\n  retrievePaymentIntent(clientSecret: string): Promise<PaymentIntentResultType>;\n  // Process a payment\n  processPayment(paymentIntentId: string): Promise<PaymentIntentResultType>;\n  // Create Setup Intent\n  createSetupIntent(\n    params: CreateSetupIntentParams\n  ): Promise<SetupIntentResultType>;\n  // Cancel Payment Intent\n  cancelPaymentIntent(\n    paymentIntentId: string\n  ): Promise<PaymentIntentResultType>;\n  // Collect Setup Intent payment method\n  collectSetupIntentPaymentMethod(\n    params: CollectSetupIntentPaymentMethodParams\n  ): Promise<SetupIntentResultType>;\n  // Install available update\n  installAvailableUpdate(): Promise<void>;\n  // Cancel installing software update\n  cancelInstallingUpdate(): Promise<void>;\n  // Set text on a reader display\n  setReaderDisplay(cart: Cart): Promise<{\n    error?: StripeError;\n  }>;\n  // Clear reader display\n  clearReaderDisplay(): Promise<ClearReaderDisplayResultType>;\n  retrieveSetupIntent(clientSecret: string): Promise<SetupIntentResultType>;\n  // Cancel Setup Intent\n  cancelSetupIntent(paymentIntentId: string): Promise<SetupIntentResultType>;\n  // List of locations belonging to the merchant\n  getLocations(params: GetLocationsParams): Promise<GetLocationsResultType>;\n  // Confirm Setup Intent\n  confirmSetupIntent(paymentIntentId: string): Promise<SetupIntentResultType>;\n  simulateReaderUpdate(update: Reader.SimulateUpdateType): Promise<void>;\n  collectRefundPaymentMethod(\n    params: RefundParams\n  ): Promise<CollectRefundPaymentMethodType>;\n  cancelCollectRefundPaymentMethod(): Promise<{\n    error?: StripeError;\n  }>;\n  processRefund(): Promise<ProcessRefundResultType>;\n  clearCachedCredentials(): Promise<{\n    error?: StripeError;\n  }>;\n  readReusableCard(\n    params: ReadReusableCardParamsType\n  ): Promise<PaymentMethodResultType>;\n  cancelCollectPaymentMethod(): Promise<{\n    error?: StripeError;\n  }>;\n  cancelCollectSetupIntent(): Promise<{\n    error?: StripeError;\n  }>;\n  cancelReadReusableCard(): Promise<{\n    error?: StripeError;\n  }>;\n  setSimulatedCard(cardNumber: string): Promise<{\n    error?: StripeError;\n  }>;\n};\n\nexport default StripeTerminalReactNative as StripeTerminalSdkType;\n"],"mappings":"gFAAA,yCAiCA,GAAQA,CAAAA,yBAAR,CAAsCC,0BAAtC,CAAQD,yBAAR,C,aA6GeA,yB"}