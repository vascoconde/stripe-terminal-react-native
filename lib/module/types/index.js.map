{"version":3,"names":["CommonError","IOS","Android","PaymentMethod"],"sources":["index.ts"],"sourcesContent":["import type { Refund } from './Refund';\nimport type { PaymentIntent } from './PaymentIntent';\nimport type { Reader } from './Reader';\nimport type { SetupIntent } from './SetupIntent';\n\nexport * from './Reader';\nexport * from './SetupIntent';\nexport * from './PaymentIntent';\nexport * from './Refund';\n\nexport type InitParams = {\n  logLevel?: LogLevel;\n};\n\nexport type SetConnectionTokenParams = {\n  token?: string;\n  error?: string;\n};\n\nexport type LogLevel = LogLevelIOS | LogLevelAndroid;\nexport type LogLevelIOS = 'none' | 'verbose';\nexport type LogLevelAndroid = 'none' | 'verbose' | 'error' | 'warning';\n\nexport type DiscoverReadersParams = {\n  simulated?: boolean;\n  discoveryMethod: Reader.DiscoveryMethod;\n};\n\nexport type GetLocationsParams = {\n  limit?: number;\n  endingBefore?: string;\n  startingAfter?: string;\n};\n\nexport type ConnectBluetoothReaderParams = {\n  reader: Reader.Type;\n  locationId?: string;\n};\n\nexport type ConnectUsbReaderParams = {\n  reader: Reader.Type;\n  locationId?: string;\n};\n\nexport type ConnectLocalMobileParams = {\n  reader: Reader.Type;\n  locationId?: string;\n};\n\nexport type ConnectHandoffParams = {\n  reader: Reader.Type;\n  locationId?: string;\n};\n\nexport type LineItem = {\n  displayName: string;\n  quantity: number;\n  amount: number;\n};\n\nexport type Cart = {\n  currency: string;\n  tax: number;\n  total: number;\n  lineItems: LineItem[];\n};\n\nexport type ConnectInternetReaderParams = {\n  reader: Reader.Type;\n  failIfInUse?: boolean;\n};\n\nexport enum CommonError {\n  Failed = 'Failed',\n  Canceled = 'Canceled',\n  Unknown = 'Unknown',\n}\n\nexport type LocationStatus = 'notSet' | 'set' | 'unknown';\n\nexport type StripeError<T = CommonError> = {\n  code: T;\n  message: string;\n};\n\nexport type InitializeResultType =\n  | {\n      reader?: Reader.Type;\n      error?: undefined;\n    }\n  | { error: StripeError; reader?: undefined };\n\nexport type DiscoverReadersResultType = Promise<{\n  error?: StripeError;\n}>;\n\nexport type CancelDiscoveringResultType = Promise<{\n  error?: StripeError;\n}>;\n\nexport type ConnectReaderResultType =\n  | {\n      reader: Reader.Type;\n      error?: undefined;\n    }\n  | { reader?: undefined; error: StripeError };\n\nexport type DisconnectReaderResultType = {\n  error: StripeError;\n};\n\nexport type UpdateSoftwareResultType = {\n  update?: Reader.SoftwareUpdate;\n  error?: StripeError;\n};\n\nexport interface Location {\n  displayName?: string;\n  id: string;\n  livemode: boolean;\n  address?: Address;\n}\n\nexport interface Address {\n  city?: string;\n  country?: string;\n  postalCode?: string;\n  line1?: string;\n  line2?: string;\n  state?: string;\n}\n\nexport type PaymentStatus =\n  | 'notReady'\n  | 'ready'\n  | 'processing'\n  | 'waitingForInput';\n\nexport type PaymentMethodType = 'cardPresent' | 'interacPresent' | 'card';\n\nexport interface Charge {\n  id: string;\n  amount: number;\n  description: string;\n  currency: string;\n  status: string;\n}\n\nexport type CreatePaymentIntentParams = CreatePaymentIntentIOSParams & {\n  amount: number;\n  currency: string;\n  setupFutureUsage?: 'off_session' | 'on_session';\n  onBehalfOf?: string;\n  transferDataDestination?: string;\n  applicationFeeAmount?: number;\n  stripeDescription?: string;\n  statementDescriptor?: string;\n  receiptEmail?: string;\n  customer?: string;\n  transferGroup?: string;\n  metadata?: Record<string, string>;\n  paymentMethodOptions?: PaymentMethodOptions;\n};\n\nexport type CreatePaymentIntentIOSParams = {\n  paymentMethodTypes?: string[];\n};\n\nexport type PaymentMethodOptions = {\n  requestExtendedAuthorization?: boolean;\n  requestIncrementalAuthorizationSupport?: boolean;\n};\n\nexport type CollectPaymentMethodParams = {\n  paymentIntentId: string;\n  skipTipping?: boolean;\n  tipEligibleAmount?: number;\n};\n\nexport type CollectSetupIntentPaymentMethodParams = {\n  customerConsentCollected?: boolean;\n  setupIntentId: string;\n};\n\nexport type CreateSetupIntentParams = {\n  customerId?: string;\n};\n\nexport type PaymentIntentResultType =\n  | {\n      paymentIntent: PaymentIntent.Type;\n      error?: undefined;\n    }\n  | {\n      paymentIntent?: undefined;\n      error: StripeError;\n    };\n\nexport type SetupIntentResultType =\n  | {\n      setupIntent: SetupIntent.Type;\n      error?: undefined;\n    }\n  | {\n      setupIntent?: undefined;\n      error: StripeError;\n    };\n\nexport type GetLocationsResultType =\n  | {\n      locations: Location[];\n      hasMore: boolean;\n      error?: undefined;\n    }\n  | {\n      locations?: undefined;\n      hasMore?: undefined;\n      error: StripeError;\n    };\n\nexport type ClearReaderDisplayResultType = {\n  error: StripeError;\n};\n\nexport type CollectRefundPaymentMethodType = {\n  error?: StripeError;\n};\n\nexport type RefundParams = {\n  chargeId: string;\n  amount: number;\n  currency: string;\n};\n\nexport type CardPresent = {\n  last4: string;\n  expMonth: string;\n  expYear: string;\n  cardholderName?: string;\n  funding: string;\n  brand: string;\n  fingerprint: string;\n  generatedCard?: string;\n  receipt?: string;\n  emvAuthData?: string;\n  country?: string;\n  preferredLocales?: string;\n};\n\nexport type PaymentMethodDetails = {\n  type: string;\n  cardPresent?: CardPresent;\n  interacPresent?: string;\n};\n\nexport type ProcessRefundResultType = {\n  refund?: Refund.Props;\n  error?: StripeError;\n};\n\nexport type ReadReusableCardParamsType = {\n  customer?: string;\n};\n\ntype CardDetails = {\n  brand: string;\n  country: string;\n  expMonth: number;\n  expYear: number;\n  fingerprint: string;\n  funding: string;\n  last4: string;\n};\n\n/**\n * @ignore\n */\nexport type EventResult<T> = {\n  result: T;\n};\n\nexport type UserCallbacks = {\n  onUpdateDiscoveredReaders?(readers: Reader.Type[]): void;\n  onFinishDiscoveringReaders?(error?: StripeError): void;\n  onDidReportUnexpectedReaderDisconnect?(error?: StripeError): void;\n  onDidReportAvailableUpdate?(update: Reader.SoftwareUpdate): void;\n  onDidStartInstallingUpdate?(update: Reader.SoftwareUpdate): void;\n  onDidReportReaderSoftwareUpdateProgress?(progress: string): void;\n  onDidFinishInstallingUpdate?(result: UpdateSoftwareResultType): void;\n\n  onDidRequestReaderInput?(input: Reader.InputOptions[]): void;\n  onDidRequestReaderDisplayMessage?(message: Reader.DisplayMessage): void;\n\n  onDidChangeConnectionStatus?(status: Reader.ConnectionStatus): void;\n  onDidChangePaymentStatus?(status: PaymentStatus): void;\n};\n\nexport namespace PaymentMethod {\n  export type Type = IOS.Type &\n    Android.Props & {\n      id: string;\n      customer: string;\n      cardDetails: CardDetails;\n    };\n\n  export namespace IOS {\n    export interface Type {\n      created: string;\n      type: string;\n    }\n  }\n\n  export namespace Android {\n    export interface Props {\n      livemode: boolean;\n    }\n  }\n}\n\nexport type PaymentMethodResultType =\n  | {\n      paymentMethod?: PaymentMethod.Type;\n      error: undefined;\n    }\n  | {\n      paymentMethod: undefined;\n      error: StripeError;\n    };\n"],"mappings":"iKAKA,iVACA,0WACA,oXACA,iV,GAgEYA,CAAAA,W,2CAAAA,W,EAAAA,W,oBAAAA,W,wBAAAA,W,yBAAAA,W,uBAAAA,W,iHAyOOC,G,GAAAA,G,gBAAAA,G,kBAAAA,G,0CAOAC,O,GAAAA,O,gBAAAA,O,kBAAAA,O,UAfFC,a,yBAAAA,a"}