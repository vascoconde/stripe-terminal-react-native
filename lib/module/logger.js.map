{"version":3,"names":["getDeviceInfo","device_class","host_os_version","Platform","Version","toString","hardware_model","pos_info","description","select","ios","android","buildGatorRequest","method","requestPayload","sessionToken","id","Date","now","service","content","JSON","stringify","session_token","version_info","client_type","client_version","packageJson","version","parent_trace_id","device_info","sendGatorRequest","request","url","fetch","headers","body","Logger","_traces","setInterval","flushTraces","instance","fn","methodName","constructTrace","name","action_id","Math","floor","random","args","baseTraceObject","origin_role","origin_id","posId","trace","request_info","user_agent","start_time_ms","total_time_ms","traces","additional_context","session_id","serial_number","response","apply","Promise","tracePromise","traceError","traceSuccess","getInstance","length","req","proxy_traces","then","_resp","eventRequest","proxy_events","getEventPayload","map","event","domain","scope","result","exception","clonedTraceBase","resp","error","responseString","catch","e","traceException","push","message","status_code","cause","substring"],"sources":["logger.ts"],"sourcesContent":["import * as packageJson from '../package.json';\nimport { Platform } from 'react-native';\nimport { b64EncodeUnicode } from './utils/b64EncodeDecode';\n\ninterface ObjectWithError {\n  error: any;\n}\n\ninterface Trace {\n  origin_role: string;\n  origin_id: string;\n  trace: {\n    action_id: string;\n    request_info: {\n      user_agent: string;\n    };\n    start_time_ms: number;\n    total_time_ms: number;\n    service: string;\n    method: string;\n    request: string;\n    response?: string;\n    exception?: string;\n    version_info: {\n      client_type: string;\n      client_version: string;\n    };\n    traces: string[];\n    additional_context: {\n      action_id: string;\n      session_id: string;\n      serial_number: string;\n    };\n  };\n}\n\nconst getDeviceInfo = () => {\n  return {\n    device_class: 'POS',\n    // device_uuid: '',\n    host_os_version: Platform.Version.toString(),\n    // host_hw_version: '', // ex: 'iPad4,1' or 'SM-N960U'\n    hardware_model: {\n      pos_info: {\n        description: Platform.select({\n          ios: 'iOS',\n          android: 'Android',\n        })?.toString(),\n      },\n    },\n    // app_model: {\n    //   app_id: '',\n    //   app_version: '',\n    // },\n  };\n};\n\nconst buildGatorRequest = (\n  method: string,\n  requestPayload: object,\n  sessionToken: string | null\n) => {\n  return {\n    id: Date.now(),\n    service: 'GatorService',\n    method,\n    content: b64EncodeUnicode(JSON.stringify(requestPayload)),\n    session_token: sessionToken || '',\n    version_info: {\n      client_type: 'RN_SDK',\n      client_version: packageJson.version,\n    },\n\n    parent_trace_id: '',\n    device_info: getDeviceInfo(),\n  };\n};\n\nconst sendGatorRequest = async (request: object) => {\n  const url = 'https://gator.stripe.com:443/protojsonservice/GatorService';\n\n  return fetch(url, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(request),\n  });\n};\n\n/**\n * A singleton class whose instance exists for the lifetime of the RN SDK.\n * This class batches traces and sends them to Client-Logger, a Stripe-internal\n * analytics service.\n *\n * The instance holds onto traces, and holds a timer that flushes the collected\n * traces (currently every 10 seconds).\n */\nexport default class Logger {\n  static instance: Logger | null = null;\n  static posId: string = `pos-${Math.random().toString(36).substring(2)}`;\n  _traces: Array<Trace> = [];\n\n  static getInstance() {\n    if (Logger.instance === null) {\n      Logger.instance = new Logger();\n    }\n\n    return Logger.instance;\n  }\n\n  constructor() {\n    setInterval(Logger.flushTraces, 10 * 1000);\n  }\n\n  /**\n   * A method that traces that an inner function (`fn`) was called. This should\n   * wrap the entire method body of a public facing Terminal SDK method.\n   * This method logs the function parameters with which the function was called,\n   * and the response that gets sent back to the user.\n   *\n   * @param fn The inner function that should be called and traced.\n   * @param methodName The name of the SDK method that's getting traced.\n   * @returns A function that should be called with `fn`'s args.\n   */\n  static traceSdkMethod(\n    fn: (...args: any[]) => any | Promise<any>,\n    methodName: string\n  ) {\n    return function constructTrace(this: any, ...args: any[]) {\n      const method = methodName || fn.name;\n\n      const action_id = `${Math.floor(Math.random() * 100000000)}`;\n\n      const baseTraceObject: Trace = {\n        origin_role: 'pos-rn',\n        origin_id: Logger.posId,\n        trace: {\n          action_id,\n          request_info: {\n            user_agent: '',\n          },\n          start_time_ms: Date.now(),\n          total_time_ms: 0,\n          service: 'StripeTerminalReactNative',\n          method,\n          request: JSON.stringify({ args }),\n          version_info: {\n            client_type: 'RN_SDK',\n            client_version: packageJson.version,\n          },\n          traces: [],\n          additional_context: {\n            action_id,\n            session_id: '',\n            serial_number: '',\n          },\n        },\n      };\n\n      const response = fn.apply(this, args);\n\n      if (response instanceof Promise) {\n        Logger.tracePromise(baseTraceObject, response);\n        return response;\n      }\n\n      if ('error' in response) {\n        Logger.traceError(baseTraceObject, response);\n        return response;\n      }\n\n      Logger.traceSuccess(baseTraceObject, JSON.stringify(response));\n      return response;\n    };\n  }\n\n  private static flushTraces() {\n    if (Logger.getInstance()._traces.length === 0) {\n      return;\n    }\n\n    // reportTrace\n    const req = buildGatorRequest(\n      'reportTrace',\n      { proxy_traces: [...Logger.getInstance()._traces] },\n      ''\n    );\n    sendGatorRequest(req).then((_resp) => {\n      Logger.getInstance()._traces = [];\n    });\n\n    // reportEvent\n    const eventRequest = buildGatorRequest(\n      'reportEvent',\n      {\n        proxy_events: Logger.getEventPayload(),\n      },\n      ''\n    );\n    sendGatorRequest(eventRequest).then((_resp) => {\n      Logger.getInstance()._traces = [];\n    });\n  }\n\n  private static getEventPayload() {\n    return Logger.getInstance()._traces.map((trace) => ({\n      origin_role: 'pos-rn',\n      origin_id: Logger.posId,\n      event: {\n        domain: 'Tracer',\n        scope: 'e',\n        event: trace?.trace?.method,\n        result: trace?.trace?.exception ? 'ERROR' : 'OK',\n      },\n    }));\n  }\n\n  private static tracePromise(\n    baseTraceObject: Trace,\n    response: Promise<any>\n  ): void {\n    const clonedTraceBase = { ...baseTraceObject };\n    response\n      .then((resp) => {\n        if ('error' in resp && resp.error) {\n          Logger.traceError(clonedTraceBase, resp);\n          return;\n        }\n\n        const responseString = JSON.stringify(resp);\n        Logger.traceSuccess(clonedTraceBase, responseString);\n      })\n      .catch((e) => {\n        Logger.traceException(clonedTraceBase, e);\n      });\n  }\n\n  private static traceSuccess(baseTraceObject: Trace, response: string): void {\n    const trace = {\n      ...baseTraceObject,\n      trace: {\n        ...baseTraceObject.trace,\n        response,\n      },\n    };\n\n    Logger.getInstance()._traces.push(trace);\n  }\n\n  private static traceError(\n    baseTraceObject: Trace,\n    response: ObjectWithError\n  ): void {\n    const trace = {\n      ...baseTraceObject,\n      trace: {\n        ...baseTraceObject.trace,\n        exception: JSON.stringify(response.error),\n        response: JSON.stringify(response),\n      },\n    };\n    Logger.getInstance()._traces.push(trace);\n  }\n\n  private static traceException(\n    baseTraceObject: Trace,\n    exception: Error\n  ): void {\n    const trace = {\n      ...baseTraceObject,\n      trace: {\n        ...baseTraceObject.trace,\n        exception: exception.message,\n        status_code: exception.cause,\n        response: JSON.stringify(exception),\n      },\n    };\n    Logger.getInstance()._traces.push(trace);\n  }\n}\n"],"mappings":"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"}